<template lang='pug'>
  view.question
    view.question__timer(
      class="{{isDengerTime ? 'question__timer--denger' : 'question__timer--normal'}}"
    )
      text {{number}}s
    view.question__title(
      id="question__title{{index}}"
    )
      text {{ index+1 }}.
      text {{questions[index].subject}}
      text.multiple-choice {{questions[index].type === 2 ? '(多选)': ''}}
    scoll-view.question__options(
      scoll-y
      style="top: {{questionTitleH ? 2*questionTitleH : 2*57}}rpx;"
    )
      view.question-options-item(
        wx:for="{{questions[index].choice}}"
        wx:key="{{index}}"
        class="{{item.checked ? '.question-options-item--active' : ''}} {{item.disabled ? 'question-options-item--disabled' : ''}}"
        @tap="getAnswer({{item}}, {{index}})"
      )
        text {{item.showOption}}. {{item.content}}
    view.question__confirm-btn(
      @tap="handleAnswer"
    ) 提交答案
    PropsBox(
      :props.sync="props"
    )
    Tip
    XbResult(
      wx:if="{{isShowXbResult}}"
      :groupUserAnswer.sync="groupUserAnswer"
    )
    DrWhyResult(
      wx:if="{{isShowDrWhyResult}}"
      :optionList.sync="optionList"
    )
</template>

<script>
  import wepy from 'wepy'
  import Tip from './tip'
  import PropsBox from './propsBox'
  import XbResult from './xbResult'
  import DrWhyResult from './drWhyResult'

  import {
    getQuestions,
    postAnswer,
    postProp,
    postUserAnswer
  } from '@/utils/api'
  import md5 from 'blueimp-md5'
  import { connect } from 'wepy-redux'

  @connect({
    pid (state) {
      return state.userData.pid
    }
  })

  export default class AnswerPage extends wepy.page {
    data = {
      number: 0,                      // 倒计时
      timer: null,                    // 定时器
      isDengerTime: false,            // 是否为最后几秒
      questionTitleH: 0,              // 题干高度
      lastOutIndex: 0,                // 最后一个淘汰题的索引
      lastInIndex: 0,                 // 最后一个晋级题的索引
      index: -1,                      // 索引
      answer: '',                     // 提交的答案
      questions: [],                  // 本期所有题目信息
      currentQuestion: {},            // 正在作答的题
      groupUserAnswer: [],            // 随机三个当前排名前20用的答案
      optionList: [],                 // 当前已答用户的每个选项的比例
      startTime: 0,                   // 调用节流函数开始的时间
      isShowXbResult: false,          // 是否显示道具学霸的答案使用后的结果
      isShowDrWhyResult: false,       // 是否显示道具Dr.Why 的小抄使用后的结果
    }

    components = {
      Tip,
      PropsBox,
      XbResult,
      DrWhyResult,
    }

    watch = {
      /**
       * index
       * 监听当前所答题的索引，动态获取题干高度
       * @param newIndex {Number}
       * @param oldIndex {Number}
       */
      async index (newIndex, oldIndex) {
        if (newIndex < oldIndex) return
        let ele = `#question__title${newIndex}`
        let { height = 57 } = await this.getBoundingClientRect(ele)
        this.questionTitleH = height
        this.$apply()
      }
    }

    events = {
      toggleXbResult (state) {
        this.isShowXbResult = state
      },
      toggleDrWhyResult (state) {
        this.isShowDrWhyResult = state
      },
      /**
       * useProps
       * 使用道具
       * @param props {String} 使用的道具名
       */
      async useProps (props) {
        let { name } = props
        let { type, _id: qid } = this.questions[this.index]
        let salt = 'GeEkHeAl@YZST'
        let timestamp = new Date().getTime()
        let sign = md5(`${timestamp}${salt}`)
        let params = {
          method: 'POST',
          data: {
            qid,
            name,
            sign,
            timestamp,
            pid: this.pid,
          }
        }

        switch (name) {
          case 'ZRSYTX':
            if (type === 2) {
              wepy.showToast({
                title: '单选题才可以用该道具',
                icon: 'none'
              })
              return
            }
            let { data: { error: zrError, eAnswer: zrResult } } = await postProp(params)
            if (zrError) return
            wepy.showToast({
              title: '已为您去除两个错误答案',
              icon: 'none'
            })
            this.markErrorOption(zrResult)
            this.$broadcast('updatePropsCount', name)
            break
          case 'HSZWRNS':
            if (type === 2) {
              wepy.showToast({
                title: '单选题才可以用该道具',
                icon: 'none'
              })
              return
            }
            let { data: { error: hsError, eAnswer: hsAnswer } } = await postProp(params)
            if (hsError) return
            wepy.showToast({
              title: '已为您去除一个错误答案',
              icon: 'none'
            })
            this.markErrorOption(hsAnswer)
            this.$broadcast('updatePropsCount', name)
            break
          case 'XBDDA':
            let { data: { error: xbError, data } } = await postProp(params)
            if (data) this.$broadcast('toggleXbResult', true)
            if (!xbError) {
              this.formatUserAnswer(data)
              this.isShowXbResult = true
              this.$broadcast('updatePropsCount', name)
            }
            if (xbError === 6666) {
              wepy.showToast({
                title: '暂无该题的答题记录',
                icon: 'none'
              })
            }
            break
          case 'DrWhyXC':
            let { data: { error: drError, eAnswer: drAnswer } } = await postProp(params)
            if (drAnswer) this.$broadcast('toggleDrWhyResult', true)
            if (!drError) {
              this.formatOptionList(drAnswer)
              this.isShowDrWhyResult = true
              this.$broadcast('updatePropsCount', name)
            }
            if (drError === 6666) {
              wepy.showToast({
                title: '暂无该题的答题记录',
                icon: 'none'
              })
            }
            break
        }
      },
      async seeUserAnswer (dataset) {
        let { uid, index } = dataset
        let { _id: qid } = this.questions[this.index]
        let salt = 'GeEkHeAl@YZST'
        let timestamp = new Date().getTime()
        let sign = md5(`${timestamp}${salt}`)
        let params = {
          method: 'POST',
          data: {
            uid,
            qid,
            sign,
            timestamp,
            pid: this.pid,
          }
        }
        let { data: { eAnswer } } = await postUserAnswer(params)
        eAnswer.split('').forEach(el => {
          this.questions[this.index].choice.forEach(item => {
            if (item.option === el) {
              this.groupUserAnswer[index].answer += item.showOption
              this.$apply()
            }
          })
        })
      }
    }

    methods = {
      getAnswer (item, index) {
        if (item.disabled) { return }
        let currentQuestion = JSON.parse(JSON.stringify(this.questions[this.index]))
        let type = currentQuestion.type

        currentQuestion.choice.forEach((option, i) => {
          if (!option.checked && i === index) {
            currentQuestion.choice[i].checked = true
          } else if (option.checked && (type === 1 || (type === 2 && i === index))) {
            currentQuestion.choice[i].checked = false
          }
        })

        this.currentQuestion = currentQuestion
        this.questions[this.index] = currentQuestion
      },
      handleAnswer () {
        let choice = this.currentQuestion.choice
        let flag = false

        if (choice) {
          for (let i = 0; i < choice.length; i++) {
            if (choice[i].checked) flag = true
          }
        }

        if (!choice || (choice && !flag)) return

        const fn = () => {
          if (choice && flag) {
            this.handleAnswer()
            this.currentQuestion = {}
            this.$broadcast('closePropsBox', false)
          }
        }

        this.throttling(fn, 3000)
      }
    }

    onLoad (params) {
      this.initData(params)
    }

    onUnload () {
      clearTimeout(this.timer)
    }

    async initData (params) {
      this.index = 0
      this.formatQuestions(await this.getQuestions())
    }

    async handleAnswer () {
      let choice = this.currentQuestion.choice
      let answer = ''
      for (let i = 0; i < choice.length; i++) {
        if (choice[i].checked) {
          answer += `${choice[i].option} `
        }
      }
      this.answer = answer.trim().split('').sort().map((option) => {
        if (option) return option
      }).join('').trim()
      clearTimeout(this.timer)

      let params = {
        method: 'POST',
        data: {
          pid: this.pid,
          qid: this.currentQuestion._id,
          finished: 0,
          answer: this.answer
        }
      }
      // 判断正在答的题是否为最后一题
      if (this.index < this.lastInIndex) {
        await this.handleAnswerResponse(await postAnswer(params))
      } else {
        params.data.finished = 1
        await this.handleAnswerResponse(await postAnswer(params))
      }

      this.currentQuestion = {}
      this.$apply()
    }

    // 标记出错误选项
    markErrorOption (aErrorOption) {
      aErrorOption.forEach((errorOption) => {
        this.questions[this.index].choice.forEach(item => {
          if (errorOption === item.option) {
            item.disabled = true
            this.$apply()
          }
        })
      })
    }

    // 格式化学霸的答案数据格式
    formatUserAnswer (groupUserAnswer) {
      this.groupUserAnswer = groupUserAnswer.map(item => {
        let { user: { avatar, nickName, uid } } = item
        return {avatar, nickName, uid, answer: ''}
      })
      this.$apply()
    }

    // 格式选项占比数据格式
    formatOptionList (orginOption) {
      let optionList = []
      let obj = {}
      for (let key of Object.keys(orginOption)) {
        obj = {
          option: key.split(''),
          optionStr: '',
          proportion: orginOption[key],
          proportionWidth: orginOption[key] < 7 ? 32 : 195 * orginOption[key] / 100,
          proportionValue: `${orginOption[key]}%`
        }
        obj.option.forEach(option => {
          this.questions[this.index].choice.forEach(item => {
            if (option === item.option) {
              obj.optionStr += item.showOption
            }
          })
        })
        obj.optionStr = obj.optionStr.split('').sort().join('')
        obj.optionStr = obj.optionStr ? obj.optionStr : '空'
        optionList.push(obj)
      }
      this.optionList = optionList
      this.$apply()
    }

    // 获取本期所有题
    async getQuestions () {
      wepy.showLoading({
        title: '题目加载中',
        mask: true
      })
      let params = {
        method: 'POST',
        data: {
          pid: this.pid
        }
      }
      let { data: { error_code, data: questions } } = await getQuestions(params)
      let len = questions.length
      if (error_code === 5002) {
        wepy.navigateBack({
          delta: 1
        })
        return
      }
      if (!error_code && len) this.startTimer()

      if (!error_code && !len) {
        let { confirm } = await wepy.showModal({
          title: '获取题目失败',
          content: '请返回重新获取题目',
          showCancel: false
        })
        if (!confirm) return
        wepy.navigateBack({
          delta: 1
        })
      }
      wepy.hideLoading()
      questions = JSON.parse(JSON.stringify(questions).replace(/\u00A0|\u2028|\u2029|\uFEFF/g, ''))
      return questions
    }

    formatQuestions (questionsMap) {
      let questions = JSON.parse(JSON.stringify(questionsMap))
      let quesitonsOutStates = []
      let showOptions = ['A', 'B', 'C', 'D', 'E', 'F']
      for (let i of questions.keys()) {
        let choice = []
        for (let j of questions[i].choice.keys()) {
          choice.push(questions[i].choice[j])
        }
        choice = this.shuffle(choice.map(item => this.formatChoiceItem(item)))

        for (let [k, item] of choice.entries()) {
          item.showOption = showOptions[k]
          item.disabled = false
        }

        questions[i].choice = choice
        quesitonsOutStates.push(questions[i].out)
      }
      this.questions = questions
      this.lastOutIndex = quesitonsOutStates.lastIndexOf(1)
      this.lastInIndex = quesitonsOutStates.lastIndexOf(0)
      this.$apply()
    }

    formatChoiceItem (choice) {
      let newChoice = {}
      let aKeys = Object.keys(choice)
      for (let i = 0; i < aKeys.length; i++) {
        newChoice.option = aKeys[i]
        newChoice.content = choice[aKeys[i]]
      }
      return newChoice
    }

    // 处理答题响应
    async handleAnswerResponse (res) {
      let { data: { data = 0, alive = 0, finished = 0, total = 0, error = 0 } } = res
      let { out } = this.questions[this.index]
      let isLastOutIndex = this.index === this.lastOutIndex
      let isLastInIndex = this.index === this.lastInIndex

      if (error && !finished) {
        this.$invoke(this.$com.Tip, 'hideTip')
        this.nextQuestion()
        return
      }

      if (error && isLastOutIndex) {
        this.$invoke(this.$com.Tip, 'hideTip')
        wepy.redirectTo({
          url: `/pages/result/index?score=${total}`
        })
        return
      }

      if (out && isLastOutIndex && data && !alive) {
        await this.showTip('答对啦！恭喜晋级！', true)
        this.nextQuestion()
        return
      }

      if (out && isLastOutIndex && data && alive) {
        await this.showTip('自动使用复活卡！恭喜晋级！', true)
        this.nextQuestion()
        return
      }

      if (out && isLastOutIndex && !data && finished) {
        await this.showTip('很遗憾！您被淘汰了！', false)
        wepy.redirectTo({
          url: `/pages/result/index?score=${total}&isOut=1`
        })
        return
      }

      if (out && !isLastOutIndex && data && !alive) {
        await this.showTip('答对啦！好棒！', true)
        this.nextQuestion()
        return
      }

      if (out && !isLastOutIndex && data && alive) {
        await this.showTip('答错啦！自动使用复活卡！', true)
        this.nextQuestion()
        return
      }

      if (out && !isLastOutIndex && !data && finished) {
        await this.showTip('很遗憾！您被淘汰了！', false)
        wepy.redirectTo({
          url: `/pages/result/index?score=${total}&isOut=1`
        })
        return
      }

      if (!out && isLastInIndex && data && finished) {
        await this.showTip('答对啦！答题结束！', true)
        wepy.redirectTo({
          url: `/pages/result/index?score=${total}`
        })
        return
      }

      if (!out && isLastInIndex && !data && finished) {
        await this.showTip('答错啦！答题结束！', false)
        wepy.redirectTo({
          url: `/pages/result/index?score=${total}`
        })
        return
      }

      if (!out && !isLastInIndex && data && !finished) {
        await this.showTip('答对啦！好棒！', true)
        this.nextQuestion()
        return
      }

      if (!out && !isLastInIndex && !data && !finished) {
        await this.showTip('答错啦！下一题加油哦！', false)
        this.nextQuestion()
        return
      }
    }

    // 展示提示框
    async showTip (tipcontent, isCorrect) {
      this.$invoke(this.$com.Tip, 'showTip', tipcontent, isCorrect)
      await this.timeout(1000)
      this.$invoke(this.$com.Tip, 'hideTip', tipcontent, isCorrect)
    }

    // 切换到下一题
    nextQuestion () {
      this.startTime = 0
      if (this.index >= this.lastInIndex) {
        this.index = this.lastInIndex
      } else {
        this.index++
      }
      this.$apply()
      this.startTimer()
    }

    // 随机打乱数组
    shuffle (arr) {
      return arr.sort(() => {
        return Math.random() - 0.5
      })
    }

    // 开启定时器
    startTimer () {
      clearTimeout(this.timer)
      this.number = 30
      this.isDengerTime = false
      this.$apply()
      this.interval(this.countdown(), 1000)
    }

    async timeup () {
      clearTimeout(this.timer)
      this.$broadcast('closePropsBox', false)
      this.isShowXbResult = false
      this.isShowDrWhyResult = false
      this.currentQuestion = this.questions[this.index]
      this.handleAnswer()
    }

    // 倒计时处理函数
    countdown () {
      return () => {
        if (!this.number) {
          this.timeup()
          return
        }

        if (this.number) {
          this.number--
          this.$apply()
        }

        if (this.number && this.number <= 10) {
          this.isDengerTime = true
          this.$apply()
        }
      }
    }

    // Promise化setTimeout
    async timeout (ms) {
      clearTimeout(this.timer)
      return new Promise((resolve, reject) => {
        this.timer = setTimeout(resolve, ms)
      })
    }

    async interval (cb, ms) {
      clearTimeout(this.timer)
      await this.timeout(ms)
      if (cb) cb()
      await this.interval(cb, ms)
    }

    /**
     * getBoundingClientRect
     * @param id {String} 要查询节点信息的 id
     * 查找并返回节点相关信息
     */
    getBoundingClientRect (id) {
      return new Promise(resolve => {
        setTimeout(() => {
          let query = wepy.createSelectorQuery()
          query.select(id).boundingClientRect(rect => {
            resolve(rect)
          }).exec()
        }, 150)
      })
    }

    // 函数节流
    throttling (fn, ms = 1000) {
      let curTime = +new Date()
      if (!this.startTime) {
        this.startTime = curTime
        fn()
      }
      if (curTime - this.startTime > ms) {
        this.startTime = curTime
        fn()
      } else if (this.startTime !== curTime) {
        wepy.showToast({
          title: '你点击的太快了',
          icon: 'none'
        })
      }
    }
  }
</script>

<style lang="scss">
@import '../../scss/_base.scss';

page {
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;

  width: 100vw;
  height: 100vh;

  background: linear-gradient(135deg,
  #02cefd 0%,
  #1380ff 100%);
}

.question {
  position: relative;

  width: to(355);
	height: to(490);
  border-radius: to(3);

  background: #fff;

  &::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    z-index: -1;
    transform: translateX(-50%);

    width: to(305);
    height: to(358);
    border-radius: 20px;

    box-shadow: 0 to(20) to(30) 0 rgba(19, 61, 110, 0.5);
  }

  /* S 倒计时 */
  &__timer {
    position: absolute;
    top: to(-35);
    right: 0;
    display: flex;
    align-items: center;
    justify-content: center;


    width: to(65);
    height: to(35);
    border-radius: to(3) to(3) 0 0;

    font-family: DINAlternate-Bold;
    font-size: to(24);
    color: #fff;

    background: #50e2c1;
  }
  /* E 倒计时 */

  /* S 倒计时最后几秒 */
  &__timer--denger {
    background: #e94c60;
  }
  /* E 倒计时最后几秒 */

  /* S 倒计时正常状态 */
  &__timer--normal {
    background: #50e2c1;
  }
  /* E 倒计时正常状态 */

  /* S 题干 */
  &__title {
    padding: to(15);
    border: 1px solid #d7d7d7;

    font-family: PingFangSC-Medium;
    font-size: to(18);
    color: #4a4a4a;
  }
  /* E 题干 */

  /* S 题目选项 */
  &__options {
    position: absolute;
    top: to(76);
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 9;

    width: inherit;
  }
  /* E 题目选项 */

  /* S 提交答案按钮 */
  &__confirm-btn {
    position: absolute;
    bottom: to(15);
    left: to(10);
    z-index: 99;
    display: flex;
    align-items: center;
    justify-content: center;

    width: to(335);
    height: to(35);
    border-radius: to(3);

    font-family: PingFangSC-Regular;
    font-size: to(14);
    color: #fff;

    background: linear-gradient(90deg,
		#51d4fe 0%,
		#0b6cff 100%);
  }
  /* E 提交答案按钮 */
}

/* S 多选题提示文字 */
.multiple-choice {
  color: #1480ff;
}
/* E 多选题提示文字 */

/* S 选项的基本样式 */
.question-options-item {
  box-sizing: border-box;

  width: to(335);
  padding: to(10);
  margin: to(8) auto;
  border-radius: to(3);

  font-family: PingFangSC-Regular;
	font-size: to(14);
	color: #4a4a4a;

  background: #f5f5f5;
}
/* E 选项的基本样式 */

/* S 选项的选中样式 */
.question-options-item--active {
  color: #fff;

  background: linear-gradient(90deg,
  #02cefd 0%,
  #1380ff 100%);
}
/* E 选项的选中样式 */

/* S 选项的禁止选中样式 */
.question-options-item--disabled {
  color: #fff;

  background: linear-gradient(90deg,
  #ff6f81 0%,
  #ff4242 100%);
}
/* S 选项的禁止选中样式 */
</style>
