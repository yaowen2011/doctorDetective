<template lang="pug">
  Question(
    :index.sync="index"
    :questions.sync="questions"
    :canHandleAnser.sync="canHandleAnser")
</template>

<script>
  import wepy from 'wepy'
  import Question from './question'

  import { getQuestions, postAnswer } from '@/utils/api'
  import { transformObject } from '@/utils/utils'
  export default class AnswerPage extends wepy.page {
    data = {
      index: 0,                       // 索引
      pid: '',                        // pid
      answer: '',                     // 提交的答案
      questions: [],                  // 本期所有题目信息
      currentQuestion: {},            // 正在作答的题
      canHandleAnser: true,           // 是否能够发送请求处理答案
    }

    components = {
      Question
    }

    watch = {
      questions: () => {
        wepy.hideLoading()
      }
    }

    events = {
      'updateOptionAndQuesion': (currentQuestion) => {
        this.currentQuestion = currentQuestion
      },
      'handleAnswer': async () => {
        let answer = ''
        this.canHandleAnser = false
        this.$apply()
        if (!this.currentQuestion.choice) return
        this.$invoke(this.$com.Question.$com.Timer, 'clearTimer')
        let choice = this.currentQuestion.choice
        for (let i = 0; i < choice.length; i++) {
          if (choice[i].checked) {
            answer += `${choice[i].option} `
          }
        }
        this.answer = answer.trim().split('').sort().map((option) => {
          if (option) return option
        }).join('').trim()
        this.$apply()
        let params = {
          method: 'POST',
          data: {
            pid: this.pid,
            qid: this.currentQuestion._id,
            finished: 0,
            answer: this.answer
          }
        }
        let res = {}
        // 判断正在答的题是否为最后一题
        if (this.index < this.questions.length - 1) {
          res = await postAnswer(params)
          this.handleAnswerResponse(res)
        } else {
          params.data.finished = 1
          res = await postAnswer(params)
          this.handleAnswerResponse(res)
        }
        this.currentQuestion = {}
        this.$apply()
      },
    }

    onLoad (params) {
      this.initData(params)
    }

    async initData (params) {
      try {
        wepy.showLoading({
          title: '题目加载中',
          mask: true
        })
        let { pid = '', total_score = 0, total_bonus = 0 } = params
        this.pid = pid
        this.total_score = total_score
        this.total_bonus = total_bonus
        this.questions = await this.getQuestions()
        this.$apply()
        this.$invoke(this.$com.Question.$com.Timer, 'startTimer')
      } catch (error) {
        wepy.hideLoading()
        wepy.showToast({
          title: '数据加载失败',
          icon: 'none'
        })
        wepy.navigateBack({
          delta: 1
        })
      }
    }

    // 获取本期所有题
    async getQuestions () {
      let params = {
        method: 'POST',
        data: {
          pid: this.pid
        }
      }
      let { data: { data: questions } } = await getQuestions(params)
      for (let i = 0; i < questions.length; i++) {
        let choice = []
        for (let j = 0; j < questions[i].choice.length; j++) {
          choice.push(transformObject(questions[i].choice[j]))
        }
        questions[i].choice = this.shuffle(choice)
      }
      return questions
    }

    // 处理答题响应
    async handleAnswerResponse (res) {
      try {
        let { data: { data = 0, alive = 0, finished = 0, total = 0, error = 0 } } = res
        let len = this.questions.length
        let index = this.index

        if (error !== 0 && index < len - 1) {
          wepy.showToast({
            title: 'error',
            icon: 'none'
          })
          this.nextQuestion()
        }

        if (index >= 0 && index < 3) {
          if (data === 1 && alive === 0) {
            await this.showTip('答对啦！好棒！', true)
            this.nextQuestion()
          }
          if (data === 1 && alive === 1) {
            await this.showTip('答错啦！自动使用复活卡！', true)
            this.nextQuestion()
          }
          if (data === 0 && finished === 1) {
            await this.showTip('很遗憾！您被淘汰了！', false)
            this.$invoke(this.$com.Question.$com.Timer, 'clearTimer')
            wepy.navigateTo({
              url: `/pages/result/index?score=${total}&pid=${this.pid}&total_score=${this.total_score}`
            })
          }
        } else if (index === 3) {
          if (data === 1 && alive === 0) {
            await this.showTip('答对啦！恭喜晋级！', true)
            this.nextQuestion()
          }
          if (data === 1 && alive === 1) {
            await this.showTip('自动使用复活卡！恭喜晋级！', true)
            this.nextQuestion()
          }
          if (data === 0 && finished === 1) {
            await this.showTip('很遗憾！您被淘汰了！', false)
            this.$invoke(this.$com.Question.$com.Timer, 'clearTimer')
            wepy.navigateTo({
              url: `/pages/result/index?score=${total}&pid=${this.pid}&total_score=${this.total_score}`
            })
          }
        } else if (index > 3 && index < len - 1) {
          if (data === 1 && finished === 0) {
            await this.showTip('答对啦！好棒！', true)
            this.nextQuestion()
          }
          if (data === 0 && finished === 0) {
            await this.showTip('答错啦！下一题加油哦！', false)
            this.nextQuestion()
          }
        } else if (index === len - 1) {
          if (data === 1 && finished === 1) {
            await this.showTip('答对啦！答题结束！', true)
            this.$invoke(this.$com.Question.$com.Timer, 'clearTimer')
            wepy.navigateTo({
              url: `/pages/result/index?isShowRewardBtn=1&score=${total}&pid=${this.pid}&total_bonus=${this.total_bonus}&total_score=${this.total_score}`
            })
          }
          if (data === 0 && finished === 1) {
            await this.showTip('答错啦！答题结束！', false)
            this.$invoke(this.$com.Question.$com.Timer, 'clearTimer')
            wepy.navigateTo({
              url: `/pages/result/index?isShowRewardBtn=1&score=${total}&pid=${this.pid}&total_bonus=${this.total_bonus}&total_score=${this.total_score}`
            })
          }
        }
      } catch (error) {
        wepy.showToast({
          title: '网络异常',
          icon: 'none'
        })
        this.nextQuestion()
      }
    }

    // Promise化setTimeout
    async timeout (ms) {
      return new Promise((resolve, reject) => {
        this.timer = setTimeout(resolve, ms)
      })
    }

    // 展示提示框
    async showTip (tipcontent, isCorrect) {
      this.$invoke(this.$com.Question.$com.Tip, 'showTip', tipcontent, isCorrect)
      await this.timeout(1000)
      this.$invoke(this.$com.Question.$com.Tip, 'hideTip', tipcontent, isCorrect)
    }

    // 切换到下一题
    nextQuestion () {
      this.index++
      this.canHandleAnser = true
      this.$apply()
      this.$invoke(this.$com.Question.$com.Timer, 'startTimer')
    }

    // 随机打乱数组
    shuffle (arr) {
      return arr.sort(() => {
        return Math.random() - 0.5
      })
    }
  }
</script>

<style lang="scss">
</style>
