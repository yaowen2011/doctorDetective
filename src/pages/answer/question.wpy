<template lang="pug">
  view.question_block
    view.card_wrapper
      view.prompt_wrapper
        text.prompt_progress 第{{ index + 1 }}/{{questions.length}}题{{questions[index].type === 2 ? '(多选)': ''}}
        text.prompt_timer
          Timer
      view.question_wrapper
        view.question_subject(
          class="{{questions[index].subject.length > 14 ? 'question_subject-multi' : ''}}"
        ) {{ index+1 }}. {{questions[index].subject}}
        view.question_options
          repeat(
            for="{{questions[index].choice}}"
            key="index"
          )
            view.question_option(
              class="{{item.checked ? 'question_option-active' : ''}}"
              @tap="getAnswer({{item}}, {{index}})"
            ) {{index == 0 ? 'A' : index == 1 ? 'B' : index == 2 ? 'C' : index == 3 ? 'D' : 'E'}}. {{item.content}}

      view.handle_wrapper
        Tip
        view.handle_solution(
          @tap="handleAnswer"
        ) 提交答案
</template>

<script>
  import wepy from 'wepy'
  import Tip from './tip'
  import Timer from './timer'

  export default class QuestionComponent extends wepy.component {
    props = {
      index: {
        type: Number,
        default: 0
      },
      questions: {
        type: Array,
        default: []
      },
      canHandleAnser: {
        type: Boolean,
        default: true
      }
    }

    data = {
      startTime: 0
    }

    components = {
      Tip,
      Timer
    }

    events = {
      'timeup': async () => {
        await this.$emit('updateOptionAndQuesion', this.questions[this.index])
        await this.$emit('handleAnswer')
      }
    }

    methods = {
      getAnswer (item, index) {
        let currentQuestion = this.questions[this.index]
        switch (currentQuestion.type) {
          case 1:
            for (let i = 0; i < currentQuestion.choice.length; i++) {
              if (currentQuestion.choice[i].checked) {
                currentQuestion.choice[i].checked = false
              } else if (i === index) {
                currentQuestion.choice[i].checked = true
              }
            }
            this.$emit('updateOptionAndQuesion', currentQuestion)
            break
          case 2:
            for (let i = 0; i < currentQuestion.choice.length; i++) {
              if (i === index) {
                if (currentQuestion.choice[i].checked) {
                  currentQuestion.choice[i].checked = false
                } else {
                  currentQuestion.choice[i].checked = true
                }
              }
            }
            this.$emit('updateOptionAndQuesion', currentQuestion)
            break
        }
      },
      handleAnswer () {
        if (this.canHandleAnser) {
          const fn = () => {
            this.$emit('handleAnswer')
          }
          this.throttling(fn)
        } else {
          wepy.showToast({
            title: '您的答案已提交，正在处理',
            icon: 'none'
          })
        }
      }
    }

    // 函数节流
    throttling (fn, ms = 1000) {
      let curTime = +new Date()
      if (!this.startTime) {
        this.startTime = curTime
        fn()
      }
      if (curTime - this.startTime > ms) {
        this.startTime = curTime
        fn()
      } else if (this.startTime !== curTime) {
        wepy.showToast({
          title: '你点击的太快了',
          icon: 'none'
        })
      }
    }
  }
</script>

<style lang="scss">
@import '../../scss/_variables.scss';
@import '../../scss/_layout.scss';

.question_block {
  @include verticalHorizontalCenter();
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 99999;
  background: linear-gradient(to bottom right, #3023AE, #C86DD7 );
}
.card_wrapper {
  position: relative;
  display: flex;
  flex-direction: column;
  width: 650rpx;
  height: 980rpx;
  border-radius: 40rpx;
  background: #fff;
  padding: 0 20rpx;
  box-shadow: 0px 2px 30px 0px rgba(0, 0, 0, 0.5);
}

.prompt_wrapper {
  @include horizontalCenter($direction:row);
  justify-content: space-between;
  padding: 20rpx 20rpx 10rpx 30rpx;
  font-family: PingFangSC-Medium;
  font-size: 28rpx;
  color:#4a4a4a;

  .prompt_progress {
    align-self: flex-end;
  }

  .prompt_timer {
    @include verticalHorizontalCenter();
    width: 72rpx;
    height: 72rpx;
    border-radius: 50%;
    border: 4rpx #db10e0 solid;
    color: #db10e0;
  }
}

.question_subject {
  box-sizing: border-box;
  font-family: PingFangSC-Medium;
  font-size: 40rpx;
  color: #4a4a4a;
  padding: 0 30rpx 16rpx 30rpx;
  border-bottom: 2rpx #E0E1E0 solid;
}
.question_subject-multi {
  font-size: 28rpx;
}
.question_options {
  padding: 40rpx;

  .question_option {
    @include verticalCenter();

    // height: 76rpx;
    border: 2rpx #db10e0 solid;
    border-radius: 10rpx;
    padding: 14rpx 34rpx 14rpx 50rpx;
    margin-bottom: 16rpx;
    font-family: PingFangSC-Regular;
    font-size: 36rpx;
    color: #db10e0;
  }

  // 选中状态时样式
  .question_option-active {
    background: linear-gradient(90deg, #df23f1 0%, #bc0fe0 100%);
    color: #fff;
  }
}
.handle_wrapper {
  @include verticalHorizontalCenter();
  position: absolute;
  left: 0;
  bottom: 50rpx;
  width: 100%;

  color: #fff;
  font-size: 36rpx;

  .handle_solution {
    height: 100rpx;
    width: 350rpx;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    align-self: center;

    background: #db10e0;
    border-radius: 50rpx;
  }
}
</style>
