<template lang="pug">
  view.container
    view.card_wrapper
      view.information_block
        view.information_up
          view.title 请完善您的信息
          view.input_wrapper.hospital
            input.input(
              placeholder-style="font-family: PingFangSC-Medium; font-size: 28rpx; color: #9b9b9b;"
              placeholder="所在机构"
              focus
              cursor-spacing=20
              @change="getCompany"
              @focus="inputFocus(0)"
              @blur="inputBlur"
              value="{{hospital}}")
            view.close_btn(
              wx:if="{{isHospitalClose}}"
              @tap="clearInputValue(0)")  X
            HospitalTips(
              :tips.sync="hospitals")
          viwe.input_wrapper.department
            input.input(
              placeholder-style="font-family: PingFangSC-Medium; font-size: 28rpx; color: #9b9b9b;"
              placeholder="所在科室/专业"
              cursor-spacing=20
              @change="getDepartment"
              @focus="inputFocus(1)"
              @blur="inputBlur"
              value="{{department}}")
            view.close_btn(
              wx:if="{{isDepartmentClose}}"
              @tap="clearInputValue(1)")  X
            DepartmentTips(
              :tips.sync="departments")
        view.jobtitle_wrapper
          view.jobtitle_label 职称选择
          view.jobtitle_block
            block(
            wx:for="{{jobtitles}}"
            wx:key="{{index}}")
              view.jobtitle(
                class="{{item === selectJobtitle ? 'jobtitle_active' : 'jobtitle_nomoal'}}"
                @tap="selectJobtitle({{item}})") {{item}}
        view.information_tip * 为确保顺利通过审核，请务必认真填写信息
        view.handle_button(
          @tap="submit") 提交
</template>

<script>
  import wepy from 'wepy'
  import HospitalTips from './hospitalTips'
  import DepartmentTips from './departmentTips'

  import { postUserInfo, getHospital, getHospitalDepartment, getInformation } from '@/utils/api'

  export default class InformationPage extends wepy.page {
    config = {
      navigationBarTitleText: '填写信息'
    }

    async onLoad (params) {
      let { data: { data } } = await getInformation()
      this.initData({...params, ...data})
    }

    data = {
      hospital: '',                       // 填写的医院或机构名
      hospitals: [],                      // 获取的医院列表
      isHospitalClose: false,             // 是否显示医院 input 旁的 关闭按钮
      department: '',                     // 填写的部门名称
      departments: [],                    // 获取的部门列表
      isDepartmentClose: false,           // 是否显示部门 input 旁的 关闭按钮
      pid: '',                            // pid
      isBonus: false,                     // 是否是奖金页
      isSearch: false,                    // 有焦点的 input的标志位
      timer: null,                        // 定时器
      selectJobtitle: '',                 // 选中的职称
      jobtitles: [                        // 职称
        '未定级（含研究生在读）',
        '初级职称',
        '中级职称',
        '副高级职称',
        '高级职称'
      ],
    }

    components = {
      HospitalTips,
      DepartmentTips
    }

    events = {
      'hospitalChecked': (checkedName) => {
        this.hospital = checkedName
        this.$apply()
      },
      'departmentChecked': (checkedName) => {
        this.department = checkedName
        this.$apply()
      }
    }

    methods = {
      async getCompany (e) {
        this.hospital = e.detail.value.trim()
        this.isSearch = false
        this.hospitals = []
        this.$apply()
        if (this.isSearch || !this.hospital) return
        let { data: { hospitals = '' } } = await getHospital({ query: this.hospital })
        this.isSearch = true
        this.$apply()
        if (!hospitals) return
        this.hospitals = hospitals
        clearTimeout(this.tiemr)
        this.timer = null
        this.$apply()
      },
      async getDepartment (e) {
        this.department = e.detail.value.trim()
        this.isSearch = false
        this.departments = []
        this.$apply()
        if (this.isSearch || !this.department) return
        let { data: { hospital_departments: departments = '' } } = await getHospitalDepartment({ query: this.department })
        this.isSearch = true
        this.$apply()
        if (!departments) return
        this.departments = departments
        clearTimeout(this.tiemr)
        this.timer = null
        this.$apply()
      },
      async submit () {
        const fn = async () => {
          if (!this.hospital || !this.hospital || !this.selectJobtitle) {
            wepy.showToast({
              title: '请填写完整信息',
              icon: 'none'
            })
          } else {
            let params = {
              method: 'POST',
              data: {
                company: this.hospital,
                department: this.department,
                jobtitle: this.selectJobtitle,
                pid: this.pid
              }
            }
            if (this.isBonus) {
              params = {
                method: 'POST',
                data: {
                  company: this.hospital,
                  department: this.department,
                  jobtitle: this.selectJobtitle
                }
              }
            }
            let { data: { error_code } } = await postUserInfo(params)
            clearTimeout(this.tiemr)
            this.timer = null
            this.$apply()
            if (error_code === 0) {
              wepy.navigateBack({delta: 1})
            } else {
              wepy.showToast({
                title: '出错啦',
                icon: 'none'
              })
            }
          }
        }
        this.debounce(fn)
      },
      inputFocus (params) {
        switch (params) {
          case '0':
            this.isHospitalClose = true
            break
          case '1':
            this.isDepartmentClose = true
            break
        }
      },
      inputBlur (params) {
        this.isHospitalClose = false
        this.isDepartmentClose = false
      },
      clearInputValue (params) {
        switch (params) {
          case '0':
            this.hospital = ''
            this.$apply()
            break
          case '1':
            this.department = ''
            this.$apply()
            break
        }
      },
      selectJobtitle (item) {
        this.selectJobtitle = item
      }
    }

    initData (params) {
      let { pid, isBonus, company = '', department = '', title = '' } = params
      this.selectJobtitle = title
      this.department = department
      this.hospital = company
      this.pid = pid
      this.isBonus = Boolean(isBonus)
      this.$apply()
    }

    // Promise化setTimeout
    async timeout (ms) {
      return new Promise((resolve, reject) => {
        this.timer = setTimeout(resolve, ms)
      })
    }

    // 函数防抖
    debounce (fn, ms = 1000) {
      if (this.timer) {
        clearTimeout(this.timer)
        this.timer = null
        this.$apply()
      } else {
        this.timer = setTimeout(fn, ms)
      }
    }
  }
</script>

<style lang="scss" scoped>
@import '../../scss/_layout.scss';
@import '../../scss/_element.scss';

page,
.container {
  height: 100vh;
}

.container {
  @include verticalHorizontalCenter();
  background: linear-gradient(to bottom right, #4020B8, #D263DD );
}

.card_wrapper {
  @include horizontalCenter();

  width: 650rpx;
  height: 1080rpx;
  box-sizing: border-box;
  border-radius: 40rpx;
  background: #fff;
  padding: 20rpx;
}

.information_block {
  height: 100%;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
}

.information_up {
  @include horizontalCenter();

  .title {
    font-family: PingFangSC-Semibold;
    font-size: 36rpx;
    color: #9b9b9b;
    margin: 40rpx 0;
  }

  .input_wrapper {
    margin-bottom: 90rpx;
    position: relative;

    .input {
      width: 500rpx;
      border-bottom: 2rpx #D7D7D7 solid;
      padding-right: 30rpx;
      padding-bottom: 20rpx;
    }

    .close_btn {
      width: 60rpx;
      height: 100%;
      box-sizing: border-box;
      text-align: center;
      vertical-align: middle;
      position: absolute;
      top: 0;
      right: 0;
      font-family: PingFangSC-Medium;
      font-size: 28rpx;
      color: #d7d7d7;
    }
  }
}

.information_tip {
  font-family: PingFangSC-Regular;
  font-size: 24rpx;
  color: #898989;
  margin: 20rpx 0 100rpx  40rpx;
}

.jobtitle_label {
  font-family: PingFangSC-Medium;
  font-size: 28rpx;
  color: #9b9b9b;
  text-indent: 40rpx;
}

.jobtitle_block {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;

  font-family: PingFangSC-Medium;
  font-size: 24rpx;
  color: #bd10e0;

  .jobtitle {
    @include verticalHorizontalCenter();

    width: 250rpx;
    height: 60rpx;
    border: 2rpx solid #bd10e0;
    border-radius: 20rpx;
    margin-top: 20rpx;

    &:nth-child(1) {
      width: 530rpx;
    }

    &:nth-child(2n) {
      margin-right: 30rpx;
    }
  }

  .jobtitle_active {
    background: linear-gradient(116deg, #af0df8 0%, #e42ccb 100%, #ee32c3 100%);
    color: #fff;
  }

  .jobtitle_nomoal {
    background: #fff;
  }
}


// 按钮样式
.handle_button {
  @include verticalHorizontalCenter();
  @include btn($width:350rpx, $height:100rpx, $size: 36rpx, $radius: 60rpx);
  align-self: center;
}
</style>
