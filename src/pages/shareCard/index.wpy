<template lang="pug">
  view.wrapper
    canvas(
      class="canvas"
      id="canvas"
      canvas-id="canvas")
    view.btn(
      wx:if="{{isLoaded}}"
      @tap="savePhoto") 保存到相册
</template>

<script>
import wepy from 'wepy'

export default class ShareCardPage extends wepy.page {
  data = {
    isLoaded: false,            // 数据是否加载完成
    canvasW: 0,                 // canvas 宽
    canvasH: 0,                 // canvas 高
    scale: 0,                   // 比例
    total_question: 0,          // 答题总数
    slogan: '',                 // 文案
    all_bouns: 0,               // 总奖金
    dw: '',                     // 段位
    canvasbg_snap: '',          // 背景图本地临时地址
    mpcode_snap: '',            // 小程序码本地临时地址
    avatar_snap: '',            // 个人头像本地临时地址
    avatar_model: ''            // 个人头像遮罩图片本地地址
  }

  config = {
    navigationBarBackgroundColor: '#000',
    navigationBarTitleText: '分享卡片',
    backgroundColor: '#000'
  }

  methods = {
    async savePhoto () {
      const fn = async () => {
        try {
          wepy.showLoading({
            title: '保存中'
          })
          let { tempFilePath } = await wepy.canvasToTempFilePath({
            canvasId: 'canvas',
            x: 0,
            y: 0,
            width: 4 * this.screenWidth,
            height: 4 * this.screenHeight
          })
          await wepy.saveImageToPhotosAlbum({ filePath: tempFilePath })
          wepy.showToast({
            title: '保存成功',
            icon: 'success'
          })
        } catch (error) {
          let { authSetting } = await wepy.getSetting()
          if (!authSetting['scope.writePhotosAlbum']) {
            let { cancel } = await wepy.showModal({
              title: '请求授权',
              content: '请选择允许获取您的相册权限'
            })
            if (cancel) {
              wepy.showToast({
                title: '保存失败',
                icon: 'none'
              })
            } else {
              await wepy.openSetting()
            }
          } else {
            wepy.showToast({
              title: '保存失败',
              icon: 'none'
            })
          }
        }
      }
      this.debounce(fn)
    }
  }

  async onLoad ({ all_bouns, avatar_model, avatar_snap, canvasbg_snap, dw, mpcode_snap, slogan, total_question }) {
    try {
      this.all_bouns = all_bouns
      this.avatar_model = avatar_model
      this.avatar_snap = avatar_snap
      this.canvasbg_snap = canvasbg_snap
      this.dw = dw
      this.mpcode_snap = mpcode_snap
      this.slogan = slogan
      this.total_question = total_question
      this.$apply()
      // 获得并初始化数据
      await this.initData()
      // 开始画图
      this.nativeDraw()
      this.isLoaded = true
      this.$apply()
    } catch (error) {
      console.log('error', error)
    }
  }

  nativeDraw () {
    let ctx = wepy.createCanvasContext('canvas')

    // 画背景图片
    ctx.drawImage(
      this.canvasbg_snap,
      0,
      0,
      this.canvasW,
      this.canvasH,
    )
    ctx.save()

    // 画文案
    this.drawCopywriting(ctx, this.slogan)

    // 画头像
    ctx.restore()
    ctx.drawImage(
      this.avatar_snap,
      this.format(110, 0),
      this.format(148, 1),
      this.format(86, 0),
      this.format(86, 1)
    )
    ctx.drawImage(
      this.avatar_model,
      this.format(110, 0),
      this.format(148, 1),
      this.format(86, 0),
      this.format(86, 1)
    )
    ctx.save()

    // 画段位
    ctx.restore()
    ctx.setFillStyle('#4a4a4a')
    ctx.setTextAlign('center')
    ctx.setFontSize(14 * this.scale)
    ctx.setTextBaseline('top')
    ctx.fillText(
      this.dw,
      this.canvasW / 2,
      this.format(245, 1)
    )
    ctx.save()

    // 画答题数和奖金
    let arr = [['已累计答题数(道)', this.total_question], ['已赢取奖金数(元)', this.all_bouns]]
    this.drawTextArr(ctx, arr)

    // 画小程序码说明文字
    let mpcode_text = '扫描二维码，加入医者神探答题，参与医学知识竞答，赢取现金大奖。'
    this.drawMpcodeText(ctx, mpcode_text)

    // 画二维码
    ctx.restore()
    ctx.drawImage(
      this.mpcode_snap,
      this.format(25, 0),
      this.format(425, 1),
      this.format(86, 0),
      this.format(86, 1)
    )
    ctx.save()

    ctx.draw()
  }

  format (x, sttr) {
    let res = 0
    switch (sttr) {
      case 0:
        res = this.canvasW * (x / 305)
        break
      case 1:
        res = this.canvasH * (x / 525)
        break
    }
    return res
  }

  async initData () {
    try {
      let { screenWidth } = await wepy.getSystemInfo()
      let { width, height } = await this.getBoundingClientRect({ id: '#canvas' })
      this.canvasW = width
      this.canvasH = height
      this.scale = screenWidth / 375
      this.$apply()
    } catch (error) {
      console.log('error', error)
    }
  }

  formatStrToArr ({ str, lineFontCount }) {
    let strArr = []                                              // 存放每一行文案
    let lineCount = Math.ceil(str.length / lineFontCount)        // 行数
    let index = 0
    while (index < lineCount) {
      let string = str.slice(index * lineFontCount, (index + 1) * lineFontCount)
      strArr.push(string)
      index++
    }
    return strArr
  }

  drawCopywriting (ctx, str = '') {
    let strArr = this.formatStrToArr({ str, lineFontCount: 13 })
    let lineH = this.format(30, 1)                               // 行间距
    let fontSize = 16 * this.scale                               // 字体大小
    // 画每一行中的每个字符
    for (let [i, item] of strArr.entries()) {
      for (let j = 0; j < item.length; j++) {
        ctx.restore()
        ctx.setFillStyle('#fff')
        ctx.setTextAlign('left')
        ctx.setFontSize(fontSize)
        ctx.setTextBaseline('top')
        ctx.fillText(
          item[j],
          this.format(35, 0) + (fontSize + 2) * j,
          this.format(35, 1) + lineH * i,
        )
        ctx.save()
      }
    }
  }

  drawTextArr (ctx, textArr = [[]]) {
    for (let [i, item] of textArr.entries()) {
      for (let [j, text] of item.entries()) {
        if (j < item.length - 1) {
          ctx.restore()
          ctx.setFillStyle('#4a4a4a')
          ctx.setTextAlign('left')
          ctx.setFontSize(14 * this.scale)
          ctx.setTextBaseline('bottom')
          ctx.fillText(
            text,
            this.format(60, 0),
            this.format(308, 1) + i * this.format(40, 1)
          )
          ctx.save()
        } else {
          ctx.restore()
          ctx.setFillStyle('#bd10e0')
          ctx.setTextAlign('left')
          ctx.setFontSize(25 * this.scale)
          ctx.setTextBaseline('bottom')
          ctx.fillText(
            text,
            this.format(175, 0),
            this.format(314, 1) + i * this.format(40, 1)
          )
          ctx.save()
        }
      }
    }
  }

  drawMpcodeText (ctx, str = '') {
    let strArr = this.formatStrToArr({ str, lineFontCount: 11 })
    let lineH = this.format(24, 1)                                           // 行间距
    let fontSize = 14 * this.scale                                           // 字体大小
    for (let [i, item] of strArr.entries()) {
      ctx.restore()
      ctx.setFillStyle('#4a4a4a')
      ctx.setTextAlign('left')
      ctx.setFontSize(fontSize)
      ctx.setTextBaseline('top')
      ctx.fillText(
        item,
        this.format(125, 0),
        this.format(430, 1) + lineH * i
      )
      ctx.save()
    }
  }

  // 查找并返回节点相关信息
  getBoundingClientRect ({ id }) {
    return new Promise((resolve, reject) => {
      let query = wepy.createSelectorQuery()
      query.select(id).boundingClientRect(rect => {
        resolve(rect)
      }).exec()
    })
  }

  // 函数防抖
  debounce (fn, ms = 1000) {
    if (this.timer) {
      clearTimeout(this.timer)
      this.timer = null
    } else {
      this.timer = setTimeout(fn, ms)
    }
  }
}
</script>

<style lang="scss" scoped>
@import '../../scss/_layout.scss';
@import '../../scss/_element.scss';

page, .wrapper {
  min-height: 100%;
}

.wrapper {
  background: #000;
  @include verticalHorizontalCenter();
}
.canvas {
  width: 610rpx;
  height: 1050rpx;
  // background: #fff;
  margin: 0 auto;
  border-radius: 20rpx;
}
.btn {
  @include btn($width: 240rpx, $height: 72rpx, $family: PingFangSC-Semibold, $size: 28rpx, $bgcolor: #ffc541);

  margin-top: 26rpx;
}
</style>
