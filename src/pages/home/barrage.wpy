<template lang="pug">
  view.barrage_wrapper(
    id="barrage_wrapper"
    class="{{ isShowBarrage ? '' : 'hide_barrage_wrapper' }}"
    @tap.stop="toggleBarrageBtn")
    block(
      wx:for="{{ barrages }}"
      wx:key="{{ index }}")
      view(
        id="barrage{{ index }}"
        class="barrage"
        animation="{{animationDatas[index]}}") {{item.text}}
</template>

<script>
  import wepy from 'wepy'
  export default class BarrageComponent extends wepy.component {
    data = {
      timer: 0,                           // 定时器
      barrages: [],                       // 弹幕数据
      isShowBarrage: true,                // 是否显示弹幕墙
      animationDatas: [],                 // 动画数据
      barrageWrapperW: 0,                 // 弹幕容器的宽
      barrageWrapperH: 0,                 // 弹幕容器的高
    }

    events = {
      'beginBarrage': (comments) => {
        this.barrages = comments
        this.$apply()
        this.beginBarrage()
      },
      'toggleBarrage': () => {
        if (this.isShowBarrage) {
          for (let i of this.barrages.keys()) {
            let animation = wepy.createAnimation({
              transformOrigin: '50% 50% 0',
              duration: 10,
              timingFunction: 'linear',
              delay: 0
            })
            animation.right(this.barrageWrapperW).step()
            this.animationDatas[i] = animation.export()
          }
          this.isShowBarrage = false
        } else {
          this.isShowBarrage = true
          this.beginBarrage()
        }
      }
    }
    methods = {
      toggleBarrageBtn () {
        this.$emit('toggleBarrageBtn')
      }
    }

    async beginBarrage () {
      try {
        clearTimeout(this.timer)
        await this.timeout(300)
        let { width: barrageWrapperW, height: barrageWrapperH } = await this.getBoundingClientRect({ id: '#barrage_wrapper' })
        this.barrageWrapperW = barrageWrapperW
        this.barrageWrapperH = barrageWrapperH
        this.$apply()

        for (let i of this.barrages.keys()) {
          let animation = wepy.createAnimation({
            transformOrigin: '50% 50% 0',
            duration: 10,
            timingFunction: 'linear',
            delay: 300 * i
          })
          let randomTop = Math.round(Math.random() * (barrageWrapperH - 40))
          animation.top(randomTop).step()
          animation.right(barrageWrapperW).step({ duration: 4500 })
          animation.opacity(0).step()
          animation.right(-barrageWrapperW).step()
          animation.opacity(1).step()
          this.animationDatas[i] = animation.export()
          this.$apply()
        }
      } catch (error) {
        console.log(error)
      }
    }

    async timeout (ms) {
      return new Promise((resolve, reject) => {
        this.timer = setTimeout(resolve, ms)
      })
    }

    // 查找并返回节点相关信息
    getBoundingClientRect ({ id }) {
      return new Promise((resolve, reject) => {
        let query = wepy.createSelectorQuery()
        query.select(id).boundingClientRect(rect => {
          resolve(rect)
        }).exec()
      })
    }
  }
</script>

<style lang="scss">
@import '../../scss/_variables.scss';

.barrage_wrapper {
  width: 100%;
  height: $videoHeight;
  position: absolute;
  top: 0;
  right: 0;
  z-index: 9;
  display: flex;
  background: rgba(0, 0, 0, 0.3);
  overflow: hidden;

  .barrage {
    position: absolute;
    top: 0;
    right: -100%;
    z-index: 9;
    white-space:nowrap;
    font-size: 34rpx;
    height: 60rpx;
    color: #fff;
  }
}

.hide_barrage_wrapper {
  background: rgba(0, 0, 0, 0);
}
</style>
