<template lang="pug">
  view.card_wrapper
    view.prompt_wrapper
      text.prompt_progress 第{{ index + 1 }}/{{questions.length}}题{{questions[index].type === 2 ? '(多选)': ''}}
      text.prompt_timer 
        Timer
    view.question_wrapper
      view.question_subject(
        class="{{questions[index].subject.length > 14 ? 'question_subject-multi' : ''}}"
      ) {{ index+1 }}. {{questions[index].subject}}
      view.question_options
        repeat(
          for="{{questions[index].choice}}"
          key="index"
        )
          view.question_option(
            class="{{item.checked ? 'question_option-active' : '' }}"
            @tap="getAnswer({{item}}, {{index}})"
          ) {{item.option}}. {{item.content}}
          
    view.handle_wrapper
      Tip
      view.handle_solution(
        @tap="handleAnswer"
      ) 提交答案
</template>

<script>
  import wepy from 'wepy'
  import Tip from './tip'
  import Timer from './timer'

  export default class QuestionComponent extends wepy.component {
    props = {
      index: {
        type: Number,
        default: 0
      },
      questions: {
        type: Array,
        default: []
      }
    }

    components = {
      Tip,
      Timer
    }

    events = {
      'timeup': async () => {
        await this.$emit('updateOptionAndQuesion', this.questions[this.index])
        await this.$emit('handleAnswer')
      }
    }

    methods = {
      getAnswer (item, index) {
        let currentQuestion = this.questions[this.index]
        switch (currentQuestion.type) {
          case 1:
            for (let i = 0; i < currentQuestion.choice.length; i++) {
              if (currentQuestion.choice[i].checked) {
                currentQuestion.choice[i].checked = false
              } else if (i === index) {
                currentQuestion.choice[i].checked = true
              }
            }
            this.$emit('updateOptionAndQuesion', currentQuestion)
            break
          case 2:
            for (let i = 0; i < currentQuestion.choice.length; i++) {
              if (i === index) {
                if (currentQuestion.choice[i].checked) {
                  currentQuestion.choice[i].checked = false
                } else {
                  currentQuestion.choice[i].checked = true
                }
              }
            }
            this.$emit('updateOptionAndQuesion', currentQuestion)
            break
        }
      },
      handleAnswer () {
        this.$emit('handleAnswer')
      }
    }
  }
</script>

<style lang="scss">
@import '../../scss/_variables.scss';
@import '../../scss/_layout.scss';

.card_wrapper {
  width: 650rpx;
  border-radius: 40rpx;
  background: #fff;

  padding: 0 20rpx;
}

.prompt_wrapper {
  @include horizontalCenter($direction:row);
  justify-content: space-between;
  padding: 20rpx 20rpx 0 30rpx;
  font-family: PingFangSC-Medium;
  font-size: 28rpx;
  color:#4a4a4a;

  .prompt_timer {
    @include verticalHorizontalCenter();
    width: 72rpx;
    height: 72rpx;
    border-radius: 50%;
    border: 4rpx #db10e0 solid;
    color: #db10e0;
  }
}

.question_subject {
  // height: 112rpx;
  box-sizing: border-box;
  font-family: PingFangSC-Medium;
  font-size: 40rpx;
  color: #4a4a4a;
  padding: 0 30rpx 20rpx 30rpx;
  border-bottom: 2rpx #E0E1E0 solid;
}
.question_subject-multi {
  font-size: 28rpx;
}
.question_options {
  padding: 40rpx 40rpx 0 40rpx;

  .question_option {
    @include verticalCenter();

    height: 76rpx;
    border: 2rpx #db10e0 solid;
    border-radius: 50rpx;
    padding-left: 50rpx;
    margin-bottom: 20rpx;
    font-family: PingFangSC-Regular;
    font-size: 36rpx;
    color: #db10e0;
  }

  // 选中状态时样式
  .question_option-active {
    background: linear-gradient(90deg, #df23f1 0%, #bc0fe0 100%);
    color: #fff;
  }
}
.handle_wrapper {
  @include verticalHorizontalCenter();
  position: relative;
  margin-bottom: 20rpx;

  color: #fff;
  font-size: 36rpx;

  .handle_solution {
    height: 100rpx;
    width: 350rpx;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    background: #db10e0;
    border-radius: 50rpx;
  }
}
</style>
